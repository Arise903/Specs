{
  "name": "Theater",
  "version": "1.1",
  "swift_versions": "5",
  "summary": "A powerful Swift framework for building concurrent, resilient, and responsive applications using the Actor Model.",
  "description": "Theater is a modern Swift framework that simplifies the development of concurrent, resilient, and responsive applications by leveraging the Actor Model pattern.\n\nTraditional iOS development often relies on low-level concurrency primitives like OperationQueues, dispatch semaphores, and GCD functions, which can lead to complex and error-prone code. Theater elevates the abstraction level by implementing the Actor Model, providing a more intuitive and robust platform for building scalable concurrent applications.\n\nKey Features:\n- Actor-based concurrency model\n- Message-passing communication\n- Built-in actor system\n- Simple and intuitive API\n- Inspired by Akka's design patterns\n\nTheater is open source and available under the Apache 2 License.\n\nConnect with us:\n- Email: [dario@securityunion.dev](mailto:dario@securityunion.dev)\n- GitHub: [darioalessandro/Theater](https://github.com/darioalessandro/Theater)\n\n### Quick Start\n\nInstall via CocoaPods:\n```ruby\npod 'Theater'\n```\n\nActors should subclass the Actor class:\n\n```swift\n  public class Dude : Actor {\n```\nIn order to \"listen\" for messages, actors have to override the receive method:\n```swift\n  override public func receive(msg : Message) -> Void {\n\n  }\n```\n\nIn order to unwrap the message, you can use switch \n\n```swift\noverride public func receive(msg : Message) -> Void {\n  switch (msg) {\n    case let m as Hi:\n      m.sender! ! Hello(sender: self.this)\n    case is Hello:\n      print(\"got Hello\")\n    default:\n      print(\"what?\")\n  }\n}\n```\n\nAll messages must subclass Message:\n```swift\n\npublic class Hi : Message {}\n \npublic class Hello : Message {}\n\n```\n\nActors live inside an actor system, theater provides a default system\n\n```swift\n  let system : ActorSystem = AppActorSystem.shared\n```\n\nPutting in all together:\n\n```swift\nimport Theater\n \npublic class Hi : Message {}\n \npublic class Hello : Message {}\n \npublic class Dude : Actor {\n    override public func receive(msg : Message) -> Void {\n        switch (msg) {\n            case let m as Hi:\n                m.sender! ! Hello(sender: self.this)\n            case is Hello:\n                print(\"got Hello\")\n            default:\n                print(\"what?\")\n        }\n    }\n}\n\n.\n.\n.\n(inside the app delegate)\n\nfunc application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -> Bool {\n        \n        let system : ActorSystem = AppActorSystem.shared\n        \n        let dude1 = system.actorOf(Dude.self, name: \"dude1\")\n        let dude2 = system.actorOf(Dude.self, name: \"dude2\")\n        \n        dude2 ! Hi(sender : dude1)\n```\n\nThe output will be:\n```swift\nTell = Optional(\"dude1\") <Actors.Hi: 0x7bf951a0> dude2 \nTell = Optional(\"dude2\") <Actors.Hello: 0x7be4bc00> dude1 \ngot Hello\n```",
  "homepage": "https://github.com/darioalessandro/Theater",
  "screenshots": "https://raw.githubusercontent.com/darioalessandro/Theater/master/theaterlogo.jpg",
  "license": {
    "type": "Apache 2",
    "file": "LICENSE"
  },
  "authors": {
    "Dario Alessandro": "dario@securityunion.dev"
  },
  "social_media_url": "https://youtube.com/@dario.lencina",
  "platforms": {
    "ios": "12.0",
    "osx": "14.0"
  },
  "source": {
    "git": "https://github.com/darioalessandro/Theater.git",
    "tag": "1.1"
  },
  "source_files": "Classes/**/*",
  "dependencies": {
    "Starscream": [
      "~> 4.0.8"
    ]
  },
  "pod_target_xcconfig": {
    "ARCHS": "arm64"
  },
  "user_target_xcconfig": {
    "ARCHS": "arm64"
  },
  "swift_version": "5"
}
