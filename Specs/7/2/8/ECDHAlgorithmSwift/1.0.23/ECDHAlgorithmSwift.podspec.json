{
  "name": "ECDHAlgorithmSwift",
  "version": "1.0.23",
  "summary": "A key exchange protocol algorithm based on elliptic curve cryptography for Swift.",
  "description": "A key exchange protocol algorithm based on elliptic curve cryptography for iOS.\n\nThe process of exchanging symmetric keys using ECDH asymmetric encryption method:\n1 Connect the device, obtain CBService, obtain CBCharacteristic, subscribe to CBCharacteristic Notify: peripheral.setNotifyValue(true, for: characteristic)\n2 Call method generateKeys to generate a key pair (64 bytes for public key and 32 bytes for private key)\n3 Call the sendPublicKey method to convert step 2 Send the public key to the other party\n4 Wait for the other party to notify and send its public key, call configThirdPublicKey to generate a share key from the other party's public key and its own private key, and the other party also uses step 3 The received public key and its private key generate a share key, and the two share keys are the same\nSend the share key to the backend server, and if the backend server verifies that both are the same, it indicates successful authentication",
  "homepage": "https://github.com/Json031/ECDHAlgorithmSwift",
  "license": {
    "type": "MIT",
    "file": "LICENSE"
  },
  "authors": {
    "MorganChen": "cjfmail@foxmail.com"
  },
  "platforms": {
    "ios": "12.0"
  },
  "source": {
    "git": "https://github.com/Json031/ECDHAlgorithmSwift.git",
    "tag": "1.0.23"
  },
  "source_files": [
    "Classes",
    "Classes/**/*.{h,m,swift}"
  ],
  "exclude_files": "Classes/Exclude",
  "swift_versions": "5.0",
  "dependencies": {
    "ECDHAlgorithmiOS": [

    ]
  },
  "swift_version": "5.0"
}
